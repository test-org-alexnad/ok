#!/bin/bash

GITHUB_TOKEN=$1 # Github Auth token
REPOSITORY=$2 # The Github repository to work on
ORIGINAL_TAG=$3 # The original tag generated by semantic release
NEW_TAG=$4 # The generated postfix to add to the original version


echo "Creating tag $NEW_TAG in $REPOSITORY and reference it in the release $ORIGINAL_TAG"

# https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#get-a-reference
OUT=$(   curl -Ssw \
              '\n%{http_code}' \
              -o response.json \
              -location \
              -X GET \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$REPOSITORY/git/refs/tags/$ORIGINAL_TAG" ) 2>/dev/null
STATUS_CODE=$(echo "$OUT" | tail -n1 )

if [[ $STATUS_CODE -eq 200 ]]
then
  echo "Original tag $ORIGINAL_TAG data retrieved successfully"
  ORIGINAL_SHA=$(cat response.json | jq -r .object.sha)
  echo "Tag with UDS suffix will be created for the commit $ORIGINAL_SHA"
else
  echo "Original tag $ORIGINAL_TAG data could not be retrieved"
  echo $OUT
  cat response.json
  exit 1
fi

echo "Creating tag with UDS suffix: $NEW_TAG"
CREATE_TAG_BODY="{\"ref\":\"refs/tags/$NEW_TAG\",\"sha\":\"$ORIGINAL_SHA\"}"

# https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#create-a-reference
OUT=$(   curl -Ssw \
              '\n%{http_code}' \
              -o response.json \
              -location \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$REPOSITORY/git/refs" \
              -d $CREATE_TAG_BODY) 2>/dev/null
STATUS_CODE=$(echo "$OUT" | tail -n1 )

if [[ $STATUS_CODE -eq 201 ]]
then
  echo "Tag $NEW_TAG created successfully"
else
  echo "New tag $NEW_TAG could not be created"
  echo $OUT
  cat response.json
  exit 2
fi

echo "Updating related release to have a reference to the created tag $NEW_TAG"

# https://docs.github.com/en/rest/releases/releases?apiVersion=2022-11-28#get-a-release-by-tag-name
OUT=$(   curl -Ssw \
              '\n%{http_code}' \
              -o response.json \
              -location \
              -X GET \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN"\
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$REPOSITORY/releases/tags/$ORIGINAL_TAG")  2>/dev/null
STATUS_CODE=$(echo "$OUT" | tail -n1 )

if [[ $STATUS_CODE -eq 200 ]]
then
  echo "Release ID for original tag $ORIGINAL_TAG retrieved successfully"
  RELEASE_ID=$(cat response.json | jq -r .id)
  BODY=$(cat response.json | jq .body)
  # Striping starting and trailing quotes but keeping all other escaped characters
  BODY=${BODY:1:-1}
else
  echo "Release ID for original tag $ORIGINAL_TAG could not be retrieved"
  echo $OUT
  cat response.json
  exit 3
fi

BODY="This version has the following alias: [$NEW_TAG](https://github.com/$REPOSITORY/releases/tag/$NEW_TAG)\n\n$BODY"

# https://docs.github.com/en/rest/releases/releases?apiVersion=2022-11-28#update-a-release
OUT=$(   curl -Ssw \
              '\n%{http_code}' \
              -o response.json \
              -location \
              -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN"\
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/$REPOSITORY/releases/$RELEASE_ID \
              -d "{\"body\":\"$BODY\"}") 2>/dev/null
STATUS_CODE=$(echo "$OUT" | tail -n1 )

if [[ $STATUS_CODE -eq 200 ]]
then
  echo "Reference to $NEW_TAG was added to the $ORIGINAL_TAG release successfully"
else
  echo "Release description could not be updated to contain reference to $NEW_TAG"
  echo $OUT
  cat response.json
  exit 4
fi

echo "The UDS version suffix was successfully applied"
